IMPLEMENTATION Layout

-- IMPORTS {{{1

IMPORT WinFontMetrics  COMPLETELY
       WinConfig       COMPLETELY
       Real            COMPLETELY
       Nat             COMPLETELY
       NatConv         COMPLETELY
       String          COMPLETELY
       StringConv      COMPLETELY

       Seq             COMPLETELY
       SeqMap          ONLY map
       SeqReduce       ONLY reduce

       Settings        COMPLETELY
       Dot             COMPLETELY
       Types           COMPLETELY

-- GLOBAL FUNCTIONS {{{1

DEF computeLayout (<>, _)      == <>
DEF computeLayout (pars, metr) == flatLine(lines(flatPara(layPar(pars, top'Settings, metr))))

FUN layPar : seq[par] ** real ** metrics -> seq[para]
DEF layPar (<>, _, _)                             == <>
DEF layPar (par(content, align) :: pars, y, metr) ==
    LET
        lines    == breakLines(content, metr)
        wordsPos == computePosition(lines, align, y, metr)
        yNew     == y + (asReal(#(lines)) * (height(metr) + lineskip(metr)))
    IN
        zip2dataPar(lines, wordsPos) :: layPar(pars, yNew, metr)

/*
 * Check how many words fit on the lines
 */
FUN breakLines : seq[string] ** metrics -> seq[seq[string]]
DEF breakLines (<>, _)               == <>
DEF breakLines (word :: words, metr) ==
    LET
        w            == width(word, metr)
        k            == 1 + fit(pageWidth - w, metr)(words)
        (line, tail) == split(k, word :: words)
    IN
        line :: breakLines(tail, metr)

FUN fit : real ** metrics -> seq[string] -> nat
DEF fit (_, _)(<>)                   == 0
DEF fit (supply, metr)(word :: rest) ==
    LET
        needed == glue(<>, metr, left) + width(word, metr)
        -- glue with alignment 'left' gives normal spacebar
    IN
        IF needed <= supply THEN 1 + fit(supply - needed, metr)(rest)
                            ELSE 0 FI

FUN computePosition : seq[seq[string]] ** alignment ** real ** metrics -> seq[seq[point]]
DEF computePosition (<>, _, _, _)                   == <>
DEF computePosition (line :: lines, align, y, metr) ==
    LET
        yNew == y + height(metr) + lineskip(metr)
        gl   == glue(line, metr, align)
    IN
        posLine(line, left'Settings, y, align, metr, gl) ::
        computePosition(lines, align, yNew, metr)

FUN posLine : seq[string] ** real ** real ** alignment ** metrics ** real -> seq[point]
DEF posLine(<>            , _, _, left   , _   , _ ) == <>
DEF posLine(<>            , _, _, justify, _   , _ ) == <>
DEF posLine(word :: rWords, x, y, left   , metr, gl) ==
    LET
        xNew == x + width(word, metr) + gl
    IN
        (x @ y) :: posLine(rWords, xNew, y, left, metr, gl)
DEF posLine(words, x, y, right, metr, gl) ==
    LET
        letters == allWordsNeeded(words, metr)
        allGlue == gl * asReal(#(words) - 1)
        space   == x + (pageWidth - (letters + allGlue))
    IN
        posLine(words, space, y, left, metr, gl)
DEF posLine(words, x, y, center, metr, gl) ==
    LET
        letters == allWordsNeeded(words, metr)
        allGlue == gl * asReal(#(words) - 1)
        space   == x + ((pageWidth - (letters + allGlue)) / 2)
    IN
        posLine(words, space, y, left, metr, gl)
DEF posLine(word::rWords, x, y, justify, metr, gl) ==
    LET
        xNew == x + width(word, metr) + gl
    IN
        (x @ y) :: posLine(rWords, xNew, y, justify, metr, gl)

/*
 * Zipping words and positions to data
 */
-- Zeilen in Paragraph
FUN zip2dataPar : seq[seq[string]] ** seq[seq[point]] -> para
DEF zip2dataPar (<>, _)            == para(<>)
DEF zip2dataPar (t :: rt, p :: rp) == zip2dataPar(rt, rp) <* zip2dataLine(t, p)

-- WÃ¶rter pro Zeile
FUN zip2dataLine : seq[string] ** seq[point] -> line
DEF zip2dataLine (<>, _)      == line(<>)
DEF zip2dataLine (t::T, p::P) == zip2dataLine(T, P) << posWord(t, p)

/*
 * Widths
 */
FUN width : string ** metrics -> real
DEF width (word, metr) == width
    WHERE
        (width, height) == dimensions(metr)(`(word))

FUN allWordsNeeded : seq[string] ** metrics -> real
DEF allWordsNeeded(words, metr) == reduce(+, 0)(map(width(_, metr))(words))

FUN glue : seq[string] ** metrics ** alignment -> real
DEF glue(words, metr, align) ==
    IF justify?(align) THEN (pageWidth - allWordsNeeded(words, metr)) / asReal(#(words) - 1)
                       ELSE width(!(" "), metr) FI

FUN pageWidth : real
DEF pageWidth == canvasWidth'Settings - (2 * margin'Settings)
