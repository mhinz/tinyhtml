IMPLEMENTATION Viewer

IMPORT Void            COMPLETELY
       Nat             COMPLETELY
       NatConv         COMPLETELY
       Real            COMPLETELY
       Denotation      COMPLETELY
       String          ONLY ++ <>
       SeqReduce       ONLY /

       WinButton       COMPLETELY
       WinCanvas       COMPLETELY
       WinCanvasEditor COMPLETELY
       WinConfig       COMPLETELY
       WinEmitter      COMPLETELY
       WinView         COMPLETELY
       WinWindow       COMPLETELY
       WinFontMetrics  COMPLETELY

       Com             ONLY succeed exit
       ComCompose      ONLY &
       ProcessArgs     ONLY arg argCount
       BasicIO         ONLY writeLine
       File            ONLY file open close readLines error?

       Settings        COMPLETELY
       Dot             COMPLETELY
       Draw            COMPLETELY
       Layout          COMPLETELY

DATA gui == gui(edit : canvasEditor,
                emit : emitter[action])

DATA action == exit

/*
 * Entry point.
 */
DEF viewer ==
    argCount & (\\nargs.
    IF nargs |= 2 THEN arg(0) & usage
                  ELSE init FI)

/*
 * Is shown when the wrong number of arguments
 * were given on the commandline.
 */
FUN usage : denotation -> com[void]
DEF usage (arg0) == writeLine("usage: " ++ arg0 ++ " <html file>") & exit(1)

/*
 * Read TinyHTML string from given file.
 */
FUN readFile : denotation -> com[string]
DEF readFile (path) ==
    open(path, "r")                                  & (\\fd.
    error?(fd)                                       & (\\error.
    IF error THEN writeLine("Cannot read: " ++ path) &
                  exit(1)
             ELSE
                  readLines(fd)                      & (\\lines.
                  close(fd)                          &
                  succeed(/(++, <>, lines))) FI))

/*
 * Initialize everything.
 */
FUN init : com[void]
DEF init ==
    writeLine("Initializing..")               & (\\ _ .
    arg(1)                                    & (\\arg1.
    writeLine("Read file " ++ arg1 ++ "..")   & (\\ _ .
    readFile(arg1)                            & (\\htmlstring.
    initializeGui                             & (\\gui.
    setupWindow(gui)                          & (\\win.
    fontMetrics(font'Settings)                & (\\metr.
    showText(gui, sample'Draw, metr)          & -- sample contains seq[seq[string]]
    handleEmits(gui, win))))))))

/*
 * GUI.
 */
FUN initializeGui : com[gui]
DEF initializeGui ==
    canvasEditor      & (\\edit.
    emitter           & (\\emit.
    succeed(gui(edit, emit))))

FUN setupWindow : gui -> com[window]
DEF setupWindow (gui) ==
    window(frame(gui))                  & (\\win.
    set(win, titleName(title'Settings)) & ( -- TODO: replace settings by file.title'Parser
    grab(win)                           &
    succeed(win)))

FUN frame : gui -> view
DEF frame (gui) == pad(gui.edit) ^^ exitButton(gui.emit)

FUN pad : canvasEditor -> view
DEF pad (editor) ==
    canvas with(edit      (editor)              ++
                size      (size'Settings)       ++
                background(background'Settings) ++
                foreground(foreground'Settings))

FUN exitButton : emitter[action] -> view
DEF exitButton (emit) == button with (bind(emit, exit) ++
                                      text("Beenden"))

/*
 * Use Viewer
 */
-- seq[posWord] will be replaced bei file
-- words will be replaced by file.layout
FUN showText : gui ** seq[seq[string]] ** metrics -> com[void]
-- DEF showText(gui, words) == draw'Draw(gui.edit, words) 
DEF showText(gui, passages, metr) == draw'Draw(gui.edit, passages, metr) 

FUN handleEmits : gui ** window -> com[void]
DEF handleEmits (gui, win) ==
    await(gui.emit)    & (\\act.
    IF exit?(act) THEN
        release(win)   &
        delete(win)    &
        exit(0)
    FI)
