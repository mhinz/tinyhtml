IMPLEMENTATION Viewer

-- IMPORTS {{{1

IMPORT Void            COMPLETELY
       Nat             COMPLETELY
       NatConv         COMPLETELY
       Real            COMPLETELY
       Denotation      COMPLETELY
       String          ONLY ++ <>
       StringConv      ONLY `
       SeqReduce       ONLY /
       Bool            ONLY and
       Seq             ONLY <>?
       SeqReduce       ONLY reduce

       WinButton       COMPLETELY
       WinCanvas       COMPLETELY
       WinCanvasEditor COMPLETELY
       WinConfig       COMPLETELY
       WinEmitter      ONLY emitter bind await
       WinInternal     ONLY wconfig wconfigCom
       WinView         ONLY ^^
       WinWindow       ONLY window titleName grab release set delete
       WinFontMetrics  ONLY metrics fontMetrics

       Com             ONLY succeed exit
       ComCheck        ONLY |
       ComCompose      ONLY &
       Compose         ONLY o
       ProcessArgs     ONLY arg argCount
       BasicIO         ONLY writeLine
       File            ONLY file open close readLines

       Settings        ONLY font size foreground background
       Draw            ONLY draw
       Layout          ONLY computeLayout
       Types           ONLY line posWord
       Syntax          COMPLETELY
       Token           ONLY token
       Scanner         ONLY scan
       Parser          ONLY parse
       Eval            ONLY eval

-- DATA TYPES {{{1

DATA gui == gui(edit : canvasEditor,
                emit : emitter[action])

DATA action == exit

-- GLOBAL FUNCTIONS {{{1

DEF viewer ==
    argCount & (\\nargs.
    IF nargs |= 2 THEN arg(0) & usage
                  ELSE init FI)

-- LOCAL FUNCTIONS {{{1

/*
 * Initialize everything.
 */
FUN init : com[void]
DEF init ==
    arg(1)                                 &
    readFile                               &
    buildAST                               & (\\ast.
    initializeGui                          & (\\gui.
    getTitle(ast)                          & (\\title.
    setupWindow(gui, title)                & (\\win.
    fontMetrics(font'Settings)             & (\\metr.
    eval(ast, metr)                        & (\\hugeline.
    draw'Draw(edit(gui), hugeline, metr)   &
    handleEmits(gui, win)))))))

FUN buildAST : string -> com[html]
DEF buildAST (htmlstring) ==
    LET
        (ast, rest) == parse(scan(htmlstring))
    IN
        IF <>?(rest) THEN succeed(ast)
                     ELSE writeLine("[!] Parsing failed.") &
                          exit(1) FI

FUN getTitle : html -> com[denotation]
DEF getTitle (html(title, _)) == succeed(reduce(++, <>, content(title))`)

/*
 * Is shown when the wrong number of arguments
 * were given on the commandline.
 */
FUN usage : denotation -> com[void]
DEF usage (arg0) == writeLine("usage: " ++ arg0 ++ " <html file>") & exit(1)

/*
 * Read TinyHTML string from given file.
 */
FUN readFile : denotation -> com[string]
DEF readFile (path) ==
    writeLine("[*] Read file " ++ path ++ "..")               & (\\ _ .
    open(path, "r") | (writeLine("[!] Cannot read: " ++ path) &
                       exit(1))                               & (\\fd.
    readLines(fd)                                             & (\\lines.
    close(fd)                                                 &
    succeed(/(++, <>, lines)))))

/*
 * GUI.
 */
FUN initializeGui : com[gui]
DEF initializeGui ==
    writeLine("[*] Initialize GUI..")  & (\\ _ .
    canvasEditor                       & (\\edit.
    emitter                            & (\\emit.
    succeed(gui(edit, emit)))))

/*
 * Prepare window.
 */
FUN setupWindow : gui ** denotation -> com[window]
DEF setupWindow (gui, title) ==
    writeLine("[*] Setup window..") & (\\ _ .
    window(frame(gui))              & (\\win.
    set(win, titleName(title))      & (
    grab(win)                       &
    succeed(win))))

FUN frame : gui -> view
DEF frame (gui) == pad(edit(gui)) ^^ exitButton(emit(gui))

FUN pad : canvasEditor -> view
DEF pad (editor) ==
    canvas with(edit      (editor)              ++
                size      (size'Settings)       ++
                background(background'Settings) ++
                foreground(foreground'Settings))

FUN exitButton : emitter[action] -> view
DEF exitButton (emit) == button with (bind(emit, exit) ++
                                      text("Beenden"))

/*
 * Event handler.
 */
FUN handleEmits : gui ** window -> com[void]
DEF handleEmits (gui, win) ==
    writeLine("[*] Register events..") & (\\ _ .
    await(emit(gui))                   & (\\act.
    IF exit?(act) THEN
        release(win)                   &
        delete(win)                    &
        exit(0)
    FI))
