IMPLEMENTATION Viewer

IMPORT Void            COMPLETELY
       Nat             COMPLETELY
       NatConv         COMPLETELY
       Real            COMPLETELY
       Denotation      COMPLETELY
       String          ONLY ++ <>
       SeqReduce       ONLY /
       Bool            ONLY and
       Seq             ONLY <>?

       WinButton       COMPLETELY
       WinCanvas       COMPLETELY
       WinCanvasEditor COMPLETELY
       WinConfig       COMPLETELY
       WinEmitter      COMPLETELY
       WinView         COMPLETELY
       WinWindow       COMPLETELY
       WinFontMetrics  COMPLETELY

       Com             ONLY succeed exit
       ComCheck        ONLY |
       ComCompose      ONLY &
       Compose         ONLY o
       ProcessArgs     ONLY arg argCount
       BasicIO         ONLY writeLine
       File            ONLY file open close readLines

       Settings        COMPLETELY
       Dot             COMPLETELY
       Draw            COMPLETELY
       Layout          COMPLETELY
       Syntax          COMPLETELY
       Token           ONLY token
       Scanner         ONLY scan
       Parser          ONLY parse
       Eval            ONLY eval

DATA gui == gui(edit : canvasEditor,
                emit : emitter[action])

DATA action == exit

/*
 * Entry point.
 */
DEF viewer ==
    argCount & (\\nargs.
    IF nargs |= 2 THEN arg(0) & usage
                  ELSE init FI)

/*
 * Is shown when the wrong number of arguments
 * were given on the commandline.
 */
FUN usage : denotation -> com[void]
DEF usage (arg0) == writeLine("usage: " ++ arg0 ++ " <html file>") & exit(1)

/*
 * Read TinyHTML string from given file.
 */
FUN readFile : denotation -> com[string]
DEF readFile (path) ==
    writeLine("[*] Read file " ++ path ++ "..")               & (\\ _ .
    open(path, "r") | (writeLine("[!] Cannot read: " ++ path) &
                       exit(1))                               & (\\fd.
    readLines(fd)                                             & (\\lines.
    close(fd)                                                 &
    succeed(/(++, <>, lines)))))

/*
 * Initialize everything.
 */
FUN init : com[void]
DEF init ==
    arg(1)                                 &
    readFile                               &
    buildAST                               & (\\ast.
    initializeGui                          & (\\gui.
    setupWindow(gui)                       & (\\win.
    fontMetrics(font'Settings)             & (\\metr.
    eval(ast, metr)                        & (\\hugeline.
    draw'Draw(gui.edit, hugeline, metr)    &
    handleEmits(gui, win))))))

FUN buildAST : string -> com[html]
DEF buildAST (htmlstring) ==
    LET
        (ast, rest) == parse(scan(htmlstring))
    IN
        IF <>?(rest) THEN succeed(ast)
                     ELSE writeLine("[!] Parsing failed.") &
                          exit(1) FI

/*
 * GUI.
 */
FUN initializeGui : com[gui]
DEF initializeGui ==
    writeLine("[*] Initialize GUI..")  & (\\ _ .
    canvasEditor                       & (\\edit.
    emitter                            & (\\emit.
    succeed(gui(edit, emit)))))

FUN setupWindow : gui -> com[window]
DEF setupWindow (gui) ==
    writeLine("[*] Setup window..")         & (\\ _ .
    window(frame(gui))                      & (\\win.
    set(win, titleName(title'Settings))     & ( -- TODO: replace settings by file.title'Parser
    grab(win)                               &
    succeed(win))))

FUN frame : gui -> view
DEF frame (gui) == pad(gui.edit) ^^ exitButton(gui.emit)

FUN pad : canvasEditor -> view
DEF pad (editor) ==
    canvas with(edit      (editor)              ++
                size      (size'Settings)       ++
                background(background'Settings) ++
                foreground(foreground'Settings))

FUN exitButton : emitter[action] -> view
DEF exitButton (emit) == button with (bind(emit, exit) ++
                                      text("Beenden"))
FUN handleEmits : gui ** window -> com[void]
DEF handleEmits (gui, win) ==
    writeLine("[*] Register events..") & (\\ _ .
    await(gui.emit)                    & (\\act.
    IF exit?(act) THEN
        release(win)                   &
        delete(win)                    &
        exit(0)
    FI))
