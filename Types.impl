IMPLEMENTATION Types

IMPORT Seq ONLY :: ++
       Dot ONLY .
       SeqReduce ONLY /

/*
 * Hierarchy:
 *
 * ->  posWord
 * ->  line     (seq[posWord)
 * ->  par      (seq[line])
 */

DATA posWord == posWord(text     : string,
                        position : point,
                        width    : real)

DATA line == <>
             line(data: seq[posWord])

/*
 * Put "posWord" into "line".
 */
DEF (line(<>)) << (e) == line(e :: <>)
DEF (l)        << (e) == line(e :: l.data)

/*
 * Concatenate lines.
 */
DEF (_)          ++ (line(<>)  ) == line(<>)
DEF (line(<>))   ++ (_)          == line(<>)
DEF (line(seq1)) ++ (line(seq2)) == line(seq1 ++ seq2)

/*
 * Convert seq[line] to one huge line.
 */
DEF flatten (list) == /(++, <>, list)
