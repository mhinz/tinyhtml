IMPLEMENTATION Types

-- IMPORTS {{{1

IMPORT Seq       ONLY :: ++
       SeqReduce ONLY /

-- DATA TYPES {{{1

DATA posWord == posWord(text     : string,
                        position : point)

DATA line == <>
             line(words: seq[posWord])

DATA para == <>
             para(lines: seq[line])

-- GLOBAL FUNCTIONS {{{1

/*
 * Put "posWord" into "line".
 * Put "line" into "par".
 */
DEF (line(<>)) << (e) == line(e :: <>)
DEF (l)        << (e) == line(e :: words(l))

DEF (para(<>)) <* (e) == para(e :: <>)
DEF (p)        <* (e) == para(e :: lines(p))

/*
 * Concatenate lines.
 * Concatenate paragraphs.
 */
DEF (_)          ++ (line(<>)  ) == line(<>)
DEF (line(<>))   ++ (_)          == line(<>)
DEF (line(seq1)) ++ (line(seq2)) == line(seq1 ++ seq2)

DEF (_)          +* (para(<>)  ) == para(<>)
DEF (para(<>))   +* (_)          == para(<>)
DEF (para(seq1)) +* (para(seq2)) == para(seq1 ++ seq2)

/*
 * Convert seq[line] to one huge line.
 * Convert seq[para] to one huge para.
 */
DEF flatLine (list) == /(++, <>, list)
DEF flatPara (list) == /(+*, <>, list)
