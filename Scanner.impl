IMPLEMENTATION Scanner

-- IMPORTS {{{1

IMPORT Bool         ONLY or
       Char         ONLY char whitespace? ! =
       Denotation   ONLY ++ empty
       String       ONLY <> :: ! % < +% empty?
       StringFilter ONLY split
       Compose      ONLY o
       Map          ONLY map {} def def? !
       Seq          ONLY :: <>
       SeqMap       ONLY map
       SeqReduce    ONLY reduce

-- GLOBAL FUNCTIONS {{{1

/*
 * Scanning = Partitioning + Translating.
 */
DEF scan (s) == (translate o partition)(s)

-- LOCAL FUNCTIONS {{{1

/*
 * Partition string into its lexemes.
 */
FUN partition : string -> seq[string]
DEF partition (<>)  == <>
DEF partition (str) ==
    LET
        (token, rest) == fsm(str)
    IN
        IF empty?(token) THEN <>
                         ELSE token :: partition(rest) FI

/*
 * Our finite state machine.
 */
FUN fsm : string -> string ** string
DEF fsm (<>)           == (<>, <>)
DEF fsm (char :: rest) ==
    IF whitespace?(char) THEN fsm(rest)
    IF lt?(char)         THEN inTag(%(char), rest)
                         ELSE inWord(%(char), rest) FI

/*
 * FSM: In a tag.
 */
FUN inTag: string ** string -> string ** string
DEF inTag(token, <>)           == (<>, <>)   -- [error]   end of string
DEF inTag(token, char :: rest) ==
    IF gt?(char) THEN (token +% char, rest)  -- [success] valid tag
    IF lt?(char) THEN (<>, <>)               -- [error]   nested tag
                 ELSE inTag(token +% char, rest) FI

/*
 * FSM: In a word.
 */
FUN inWord : string ** string -> string ** string
DEF inWord (token, <>)           == (<>, <>)        -- [error]   end of string
DEF inWord (token, char :: rest) ==
    IF gt?(char)        THEN (<>, <>)               -- [error]   ">" not allowed in a word
    IF endOfWord?(char) THEN (token, char :: rest)  -- [success] valid word
                        ELSE inWord(token +% char, rest) FI

/*
 * Discriminators for chevrons.
 */
FUN lt? gt? : char -> bool
DEF lt? (c) == c = !("<")
DEF gt? (c) == c = !(">")

/*
 * Discriminator for end of word.
 */
FUN endOfWord? : char -> bool
DEF endOfWord? (char) == whitespace?(char) or lt?(char)

/*
 * Map lexemes to their tokens.
 */
FUN translate : seq[string] -> seq[token]
DEF translate (strings) == map(lookup, strings)

/*
 * A string is either a tag or a word.
 */
FUN lookup : string -> token
DEF lookup (s) ==
    IF def?(s, table) THEN table!s
                      ELSE word(s) FI

/*
 * Token lookup table.
 */
FUN table : map[string, <, token]
DEF table ==
    ("<html>"!,                           openHtml      ) def
    ("</html>"!,                          closeHtml     ) def

    ("<title>"!,                          openTitle     ) def
    ("</title>"!,                         closeTitle    ) def

    ("<body>"!,                           openBody      ) def
    ("</body>"!,                          closeBody     ) def

    ("<p style=\"text-align:left\">"!,    openParLeft   ) def
    ("<p style=\"text-align:right\">"!,   openParRight  ) def
    ("<p style=\"text-align:center\">"!,  openParCenter ) def
    ("<p style=\"text-align:justify\">"!, openParJustify) def
    ("</p>"!,                             closePar      ) def

    {}

/*
 * Testing.
 */
FUN scanInput : denotation
DEF scanInput == "<html>"                                               ++
                 "<title>TinyHTML Viewer</title>"                       ++
                 "<body>"                                               ++
                 "<p style=\"text-align:left\">Line 1 one one one</p>"  ++
                 "<p style=\"text-align:right\">Line 2 two two two</p>" ++
                 "</body>"                                              ++
                 "</html>"

DEF scanOutput == scan(!(scanInput))

DEF scanTests == (reduce((\\a,b . "TOKEN: " ++ a ++ "\n" ++ b), empty) o map(`))(scanOutput)
